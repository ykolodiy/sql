COMPARE
SELECT  p.isbn13,  p.name, pl.title, 
(CASE WHEN TRIM(p.name)=TRIM(pl.title) THEN 'TRUE' ELSE 'FALSE' END) AS BOOL
FROM tbl_product_locale pl LEFT OUTER JOIN tbl_product p 
  ON (pl.product_id = p.product_id)
WHERE pl.locale_code_id = 1;




<!---Get data from Db---> 
<cfquery name="SupernameofQuery">
SELECT aaa, sss, ddd,
FROM dddd
WHERE ddddd = '#arguments.email#' AND sdsadsadsa = '#arguments.name#' ;


SELECT NAME AS 'FUCKING NAME' FROM COUNTRY ORDER BY NAME LIMIT 5;

SELECT 1+2;
1+2
3

SELECT COUNT(*) FROM COUNTRY;
update customer set ad = 'dfsdf' where id=2;

Select name, population/1000 as popmm from country where population >=1000 order by population desc;


Create table test (
	a integer,
	b text
);
insert into test values (1, 'a');
insert into test values (2, 'b');



drop table if exist test;


insert into test (a,b,c) select id,name,desc from item;


ALTER TABLE TEST ADD D TEXT;  -- NEW COLUMN D CREATED

A=1 B=0
SELECT
CASE WHEN A THEN 'TRUE' ELSE 'FALSE' END AS BOOLA,
CASE WHEN B THEN 'TRUE' ELSE 'FALSE' END AS BOOLb,
FROM BOOLTEST
RESULT: BOOLA=TRUE BOOLB=FALSE

OR
SELECT
CASE a WHEN 1 THEN 'TRUE' ELSE 'FALSE' END AS BOOLA,
CASE B WHEN 1 THEN 'TRUE' ELSE 'FALSE' END AS BOOLb,
FROM BOOLTEST


JOINTS
SELECT Customer.CustomerID, Orders.CustomerID
FROM Customer
JOINT Orders
ON Customer.CustomerID=Orders.CustomerID
;
// numbers

select 1/2;  doesnt work
select 1.0/2;  = 0.5

select cast(1 as real) /2;  = 0.5

select round(2.5555, 0); = 3.0


select datetime('now', '-5 day');


-- TRANSACTION - GROUP OF OPERATION 1 FAIL - ALL FAILS NOTHING DONE

BEGIN TRANSACTION;  -- SPEED UP PERFORMANCE
 INSERT INTO T1;
 SELECT FROM TABLE 2;
ROLLBACK; -- IT CANCEL ALL
END TRANSACTION;

SELECT ALL FROM T1;


TRIGGERS - OPERATIONS THAT AUTOMATICALLY PERFORMS WHEN DATABASE EVENT OCCURS  (INSERT ROWS UPDATE ANOTHER TABLE)


CREATE TRIGGER NAMEOFTRIGGER AFTER INSERT ON TABLESALE
 BEGIN
   UPDATE CUSTOMER SET ORDERID=NEW.ID WHERE     C.ID=NEWC.ID;
 END;



-- SUBSELECT

SELECT W, E, FROM
(SELECT F,G, FROM Y
)

-- VIEW

CREATE VIEW V AS 
   SELECT ID, TITLE FROM TRACK;

SELECT * FROM V;




DROP VIEW V;

-- procedures

CREATE PROCEDURE  (OR proc) getwashingtonemployees
AS
  SELECT E.FIRSTNAME, L.CITY
  FROM EMPLOYEE AS E
  INNER JOIN location AS L
  ON E.LOCATIONID = L.LOCATIONID
  WHERE ;.STATE = 'IL

NOW NEW WINDOW > EXEC getwashingtonemployees




CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);



select persons.lastname, houses.houseid
from persons
left join houses
on persons.personid = houses.personid;




create function dbo.getaddress (@ID int)
returns varchar(100)
as
begin
declare @address varchar(100)
select @address = address from Customers
where ID = @ID
return @address
end

>> execute
>> new window: select * , dbo.getaddress(ID) from Customers

or run standalone
>>Select dbo.getaddress(3) 

copy table
If NEW_TABLE already exists then ...
insert into new_table select * from old_table
If you want to create NEW_TABLE based on the records in OLD_TABLE ...
create table new_table as select * from old_table



Tables

This is a query to get all Oracle tables that can be viewed by the current user. 

select TABLE_NAME, OWNER from SYS.ALL_TABLES order by OWNER, TABLE_NAME 

The query can be filtered to return tables for a given schema by adding a where OWNER = 'some_schema' clause to the query.

 

Schemas

This is a query to get all Oracle schemas in an Oracle database instance. 

select USERNAME from SYS.ALL_USERS order by USERNAME

 

Views

This is a query to get all Oracle views that can be viewed by the current user. 

select VIEW_NAME, OWNER from SYS.ALL_VIEWS order by OWNER, VIEW_NAME 

The query can be filtered to return views for a specific schema by adding a where OWNER = 'some_schema' clause to the query.

 

Packages

This is a query to get all Oracle packages that can be viewed by the current user. 

select OBJECT_NAME, OWNER from SYS.ALL_OBJECTS where UPPER(OBJECT_TYPE) = 'PACKAGE' order by OWNER, OBJECT_NAME 

To query for package bodies, substitute PACKAGE BODY for PACKAGE. 

The query can be filtered to return packages for a specific schema by adding a where OWNER = 'some_schema' clause to the query.

 

Procedures

This is a query to get all Oracle procedures that can be viewed by the current user. 

select OBJECT_NAME, OWNER from SYS.ALL_OBJECTS where upper(OBJECT_TYPE) = upper('PROCEDURE') order by OWNER, OBJECT_NAME 

The query can be filtered to return procedures for a specific schema by adding a where OWNER = 'some_schema' clause to the query.

 

Procedure Columns

This is a query to get the columns in an Oracle procedure. 

select OWNER, OBJECT_NAME, ARGUMENT_NAME, DATA_TYPE, IN_OUT from SYS.ALL_ARGUMENTS order by OWNER, OBJECT_NAME, SEQUENCE

 

Functions

This is a query to get all Oracle functions for the current user. 

select OBJECT_NAME, OWNER from SYS.ALL_OBJECTS where upper(OBJECT_TYPE) = upper('FUNCTION') order by OWNER, OBJECT_NAME 

The query can be filtered to return functions for a specific schema by adding a where OWNER = 'some_schema' clause to the query.

 

Triggers

This is a query to get all Oracle triggers for the current user. 

select TRIGGER_NAME, OWNER from SYS.ALL_TRIGGERS order by OWNER, TRIGGER_NAME 

The query can be filtered to return triggers for a specific schema by adding a where OWNER = 'some_schema' clause to the query.

 

Indexes

This is a query to get all Oracle indexes. 

select INDEX_NAME, TABLE_NAME, TABLE_OWNER from SYS.ALL_INDEXES order by TABLE_OWNER, TABLE_NAME, INDEX_NAME


NATURAL JOIN
select firstname, department from employees natural join departments;
select firstname, department from employees  join departments using (managerid);


CREATE SEQUENCE sname
START WITH num
INCREMENT BY innum
MAXVALUE
MINVALUE
CACHE
CYCLE
ORDER

//NEED TO INICIALIZE
SELECT SQ_DEMO.NEXTVAL FROM DUAL;

//NOW EXECUTE
SELECT SQ_DEMO.CURRVAL FROM DUAL;




ENABLE OUTPUT
ops$tkyte@ORA817DEV.US.ORACLE.COM> exec dbms_output.enable(10000);
ops$tkyte@ORA817DEV.US.ORACLE.COM> exec dbms_output.put_line( 'x' );
ops$tkyte@ORA817DEV.US.ORACLE.COM> set serveroutput on
ops$tkyte@ORA817DEV.US.ORACLE.COM> exec dbms_output.put_line( 'x' );
